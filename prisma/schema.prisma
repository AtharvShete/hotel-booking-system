generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  role      Role      @default(USER)
  tokens    Token[]
  bookings  Booking[]
  reviews   Review[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id         String        @id @default(uuid())
  firstName  String
  lastName   String
  email      String
  adultCount Int
  childCount Int
  checkIn    DateTime
  checkOut   DateTime
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  totalCost  Float
  hotelId    String
  hotel      Hotel         @relation(fields: [hotelId], references: [id])
  roomId     String
  room       Room          @relation(fields: [roomId], references: [id])
  createdAt  DateTime      @default(now())
  status     BookingStatus @default(CONFIRMED)
}

model Hotel {
  id            String    @id @default(uuid())
  userId        String
  name          String
  city          String
  country       String
  description   String
  type          String
  adultCount    Int
  childCount    Int
  facilities    String[]
  pricePerNight Float
  starRating    Int       @default(1)
  imageUrls     String[]
  lastUpdated   DateTime
  bookings      Booking[]
  rooms         Room[]
  reviews       Review[]
  featured      Boolean   @default(false)
  location      String?
}

model Room {
  id            String    @id @default(uuid())
  name          String
  description   String
  pricePerNight Float
  hotelId       String
  hotel         Hotel     @relation(fields: [hotelId], references: [id])
  bookings      Booking[]
  imageUrls     String[]
  capacity      Int
  type          String
  available     Boolean   @default(true)
  features      String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
